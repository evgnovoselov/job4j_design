5. Объяснить поведение программы в текстовом файле.
Мы создаем 3 объекта с сильными ссылками и они будут существовать до выхода из программы, это ссылки user, user1, user2. А так же создается 2 000 объектов в цикле без ссылок на них, которые будут маркироваться сборщиком мусора как мусор и удаляться при сборке.

При работе программы мы можем наблюдать, как сборщик мусора запускает выполнение малой сборки мусора и удаляет объекты User, которые создавались в цикле и не имеют ссылок, из Eden региона молодого покаления. Перед удалением объекта запускается метод finalize() объекта и выводит в консоль строку.

В программе по умолчанию для java 17 версии используется сборщик мусора G1 GC (Garbage-First). Сборщик мусора управляет памятью и принцип организации памяти в G1 основана на том, что память разбивается на множество регионов одинакового размера. Размер регионов зависит от общего размера кучи.

Разделение регинов в G1 на Eden, Survivor и Tenured логическое, регионы одного поколения не обязаны идти подряд и даже могут менять свою принадлежность к тому или иному поколению.

В данной программе 3 объекта с сильными ссылками сохраняются сначала в регион памяти Eden и в процессе заполнения кучи новыми объектами перемещаются в Survivor при запуске малой сборки мусора, данные регионы относятся к молодому поколению. После достижения определенного возраста, по средствам переноса объектов в регионах Survivor при малой сборке, объекты перемещаются в Tenured регион к старшему поколению.

Малая сборка мусора очищает наши объекты без ссылок и переносит выжевшие объекты в другое поколение при достижении определенного порога заполненности кучи.

Так же в процессе может запуститься смешанная сборка мусора и если в процессе очистки памяти в куче не остается свободных регионов, для копирования выживших объектов, запускается полная сборка мусора.